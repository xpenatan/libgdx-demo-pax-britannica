import groovy.json.JsonSlurper

buildscript {

    ant.get(src: 'http://libgdx.badlogicgames.com/libgdx-site/service/getVersions?release=false', dest: 'versions.json')
    def versionFile = file('versions.json')
    def json
    if (versionFile.exists()) {
        json = new JsonSlurper().parseText(versionFile.text)
    } else throw new GradleException("Unable to retrieve latest versions, please check your internet connection")

    ext {
        gdxVersion = json.libgdxSnapshot
        roboVMVersion = json.robovmVersion
        roboVMGradleVersion = json.robovmPluginVersion
        androidToolsVersion = json.androidBuildtoolsVersion
        androidSDKVersion = json.androidSDKVersion
        androidGradleToolsVersion = json.androidGradleToolVersion
        gwtVersion = json.gwtVersion
        gwtGradleVersion = json.gwtPluginVersion
    }

    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }

    dependencies {
        classpath "de.richsource.gradle.plugins:gwt-gradle-plugin:$gwtGradleVersion"
        classpath "com.android.tools.build:gradle:$androidGradleToolsVersion"
        classpath "com.mobidevelop.robovm:robovm-gradle-plugin:$roboVMGradleVersion"
        classpath "com.excelsiorjet:excelsior-jet-gradle-plugin:0.7.0"
    }
}

allprojects {
    apply plugin: "eclipse"
    apply plugin: "idea"

    version = "1.0"
    ext {
        appName = "Pax-Britannica"
    }

    repositories {
        mavenLocal();
        mavenCentral()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
    }
}

project(":core") {
    apply plugin: "java"

    dependencies {
        compile "com.badlogicgames.gdx:gdx:$gdxVersion"
    }
}

project(":desktop") {
    apply plugin: "java"
    apply plugin: 'excelsiorJet'

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-lwjgl:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    }

    excelsiorJet {
        product = 'Pax Britannica'
        vendor  = 'LibGDX'
        outputName = 'Pax Britannica'
        artifactName = 'Pax Britannica'

        mainClass 'de.swagner.paxbritannica.desktop.DesktopLauncher'
        packageFilesDir(new File(project.rootProject.projectDir, "/android/assets"))

        hideConsole = true
        globalOptimizer = true

        packaging = 'native-bundle'
        jvmArgs = ["-Duser.dir=*{exe.dir}", "-Djet.cd.to.user.dir"]

        osxBundle {
            identifier = 'libgdx.paxbritannica'
        }
    }
}

project(":android") {
    apply plugin: "android"

    configurations { natives }

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-android:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-x86"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-armeabi-v7a"
    }
}

project(":html") {
    apply plugin: "gwt"
    apply plugin: "war"
    webAppDirName = 'webapp'

    dependencies {
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion"
        compile "com.badlogicgames.gdx:gdx:$gdxVersion:sources"
        compile "com.badlogicgames.gdx:gdx-backend-gwt:$gdxVersion:sources"
    }
}

project(":dragome") {
    apply plugin: "java"

    dependencies {
        compile project(":core")
        compile "com.github.xpenatan:gdx-backend-dragome:1.0.0-ALL-SNAPSHOT"
    }
}

project(":ios") {
    apply plugin: 'java'
    apply plugin: 'robovm'

    configurations { natives }

    dependencies {
        compile "com.mobidevelop.robovm:robovm-rt:${roboVMVersion}"
        compile "com.mobidevelop.robovm:robovm-cocoatouch:${roboVMVersion}"
        compile project(":core")
        compile "com.badlogicgames.gdx:gdx-backend-robovm:$gdxVersion"
        natives "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-ios"
    }
}


tasks.eclipse.doLast {
    delete ".project"
}
